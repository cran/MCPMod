
R version 2.8.1 (2008-12-22)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(MCPMod)
Loading required package: mvtnorm
Loading required package: lattice
> set.seed(1)
> # Approximately reproduces analysis from Biometrics paper
> # (slightly different linlog model used in paper)
> data(biom)
> models <- list(emax = 0.2, linlog = NULL, linear = NULL, exponential = c(0.5/log(6),0.15), quadratic = c(-1.7485/2.0485,-1))
> MCPMod(biom, models, clinRel = 0.4, dePar = .025, pVal = T, doseEst = "MED2", off = 1, alpha = 0.05)
MCPMod

PoC (alpha = 0.05, one-sided): yes 
Model with highest t-statistic: emax 
Model used for dose estimation: emax 
Dose estimate: 
MED2,95% 
    0.17 

> # some variations
> MCPMod(biom, models, clinRel = 0.4, dePar = .05, doseEst = "MED3", off = 1, alpha = 0.05)
MCPMod

PoC (alpha = 0.05, one-sided): yes 
Model with highest t-statistic: emax 
Model used for dose estimation: emax 
Dose estimate: 
MED3,90% 
     0.4 

> MCPMod(biom, models, clinRel = 0.4, dePar = .05, doseEst = "MED1", off = 1, 
+        selModel = "AIC", alpha = 0.05)
MCPMod

PoC (alpha = 0.05, one-sided): yes 
Model with highest t-statistic: emax 
Model used for dose estimation: emax 
Dose estimate: 
MED1,90% 
    0.06 

Warning message:
In modelSelect(data, namSigMod, selMethod, pW, resp, dose, start,  :
  exponential model did not converge

> models <- list(sigEmax = c(0.2,2), logistic = c(0.2,0.1), betaMod = c(1,1))
> MCPMod(biom, models, clinRel = 0.4, dePar = .5, doseEst = "ED", off = 1, 
+        selModel = "aveBIC", alpha = 0.05, scal = 1.5)
MCPMod

PoC (alpha = 0.05, one-sided): yes 
Model with highest t-statistic: sigEmax 
Models used for dose estimation: sigEmax betaMod logistic 
Dose estimate: 
ED50% 
0.126 

> 
> # Examples from JBS paper
> doses <- c(0,10,25,50,100,150)
> models <- list(linear = NULL, emax = 25,                               
+                logistic = c(50, 10.88111), exponential= 85,            
+                betaMod=matrix(c(0.33,2.31,1.39,1.39), byrow=TRUE, nrow=2))
> planMM(models, doses, n = rep(50,6), alpha = 0.05, scal=200)
MCPMod planMM

Optimal Contrasts:
    linear   emax logistic exponential betaMod1 betaMod2
0   -0.428 -0.706   -0.406      -0.332   -0.566   -0.533
10  -0.351 -0.317   -0.392      -0.302    0.352   -0.418
25  -0.236 -0.025   -0.329      -0.250    0.461   -0.166
50  -0.045  0.202    0.061      -0.141    0.338    0.245
100  0.339  0.384    0.529       0.203   -0.121    0.627
150  0.722  0.461    0.538       0.822   -0.463    0.245

Critical Value (alpha = 0.05, one-sided): 2.152 

Contrast Correlation Matrix:
            linear  emax logistic exponential betaMod1 betaMod2
linear       1.000 0.873    0.954       0.975   -0.381    0.792
emax         0.873 1.000    0.883       0.764    0.085    0.916
logistic     0.954 0.883    1.000       0.876   -0.352    0.914
exponential  0.975 0.764    0.876       1.000   -0.487    0.638
betaMod1    -0.381 0.085   -0.352      -0.487    1.000   -0.028
betaMod2     0.792 0.916    0.914       0.638   -0.028    1.000

> powerMM(models, doses, base = 0, maxEff = 0.4, sigma = 1,       
+         lower = 10, upper = 100, step = 20, scal = 200, alpha = 0.05)
      linear      emax  logistic exponential  betaMod1  betaMod2       min
10 0.2159996 0.2178490 0.2858416   0.1986899 0.1959733 0.2090098 0.1959733
30 0.4952638 0.4839153 0.6489292   0.4639065 0.5037138 0.4745320 0.4639065
50 0.7013963 0.6846140 0.8514230   0.6710539 0.7335022 0.6776872 0.6710539
70 0.8338233 0.8180521 0.9428028   0.8103670 0.8697873 0.8136444 0.8103670
90 0.9118203 0.8996604 0.9795448   0.8959481 0.9407416 0.8976032 0.8959481
        mean       max
10 0.2205605 0.2858416
30 0.5117101 0.6489292
50 0.7199461 0.8514230
70 0.8480795 0.9428028
90 0.9208864 0.9795448
attr(,"alRatio")
[1] 1
attr(,"sumFct")
[1] "min"  "mean" "max" 
attr(,"class")
[1] "powerMM"
> sampSize(models, doses, base = 0, maxEff = 0.4, sigma = 1,             
+          upperN = 80, scal = 200, alpha = 0.05)
MCPMod sampSize

Input parameters:
 Summary Function: mean 
 Desired combined power value: 0.8 
 Level of significance: 0.05 (one-sided) 
 Allocations: balanced 

Sample size per group: 62 

Associated mean power: 0.8061 
Power under models: 
     linear        emax    logistic exponential    betaMod1    betaMod2 
     0.7904      0.7729      0.9161      0.7632      0.8259      0.7683 

> LP(models, model = "emax", type = "both", paramRange = c(10,70),
+     doses = doses, base = 0, maxEff = 0.4, sigma = 1, n = 60,
+     alpha = 0.05, len = 15, scal = 200)
MCPMod LP 

Model: emax 
Used Prior Parameter: 25 
Sample Sizes: 60 60 60 60 60 60 
Nominal Power: 0.759 

Calculated Power Values: 
     ED50 potPower actPower    LP1    LP2
1  10.000    0.741    0.719  0.040  0.023
2  14.286    0.747    0.735  0.024  0.011
3  18.571    0.751    0.746  0.013  0.005
4  22.857    0.755    0.755  0.004  0.000
5  27.143    0.761    0.761 -0.003 -0.001
6  31.429    0.764    0.767 -0.008 -0.003
7  35.714    0.768    0.771 -0.012 -0.004
8  40.000    0.769    0.774 -0.015 -0.005
9  44.286    0.771    0.777 -0.018 -0.005
10 48.571    0.773    0.778 -0.019 -0.005
11 52.857    0.774    0.780 -0.021 -0.006
12 57.143    0.776    0.782 -0.023 -0.006
13 61.429    0.777    0.783 -0.024 -0.006
14 65.714    0.777    0.784 -0.025 -0.006
15 70.000    0.778    0.785 -0.026 -0.007
>     
> # Example from R News 1(2) p. 28, 29
> CM <- c(1, 1, 1, 0, 0, -1, 0, 0, 1, 0, 0, -1, 0, 0,
+         1, 0, 0, 0, -1, -1, 0, 0, -1, 0, 0)
> CM <- t(matrix(CM, ncol = 5))
> critVal(CM, n=c(26, 24, 20, 33, 32), alpha = 0.05, 
+         twoSide = TRUE)
[1] 2.560983
> 
